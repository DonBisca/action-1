name: Exploring Variables and Secrets

on:
    # push
    # schedule:
    #     - cron: "*/1 * * * *"
    workflow_dispatch: 



    # without variables
# jobs:
    # docker:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Docker build
    #           run: docker build -t docker.io/dockerUsername/imageName:latest

    #         - name: Docker Login
    #           run: docker login --username=dockerUsername --password=s3cUrePaSsw0rd

    #         - name: Docker Publish
    #           run: docker push docker.io/dockerUsername/imageName:latest

    # deploy:
    #     needs: docker
    #     runs-on: ubuntu-latest
    #     steps:
    #       - name: Docker run
    #         run: docker run -d -p 8080:80 docker.io/dockerUsername/imageName:latest

#environment variables at step level
# jobs:
    # docker:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Docker build
    #           env:
    #             CONTAINER_REGISTRY: docker.io
    #             DOCKER_USERNAME: luisher91
    #             IMAGE_NAME: github-actions-nginx
    #           run: echo docker build -t ${{ env.CONTAINER_REGISTRY }}/$DOCKER_USERNAME/$IMAGE_NAME:latest

    #         - name: Docker Login
    #           env:
    #             DOCKER_PASSWORD: LHCG
    #             DOCKER_USERNAME: luisher
    #           run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

    #         - name: Docker Publish
    #           env:
    #             CONTAINER_REGISTRY: docker.io
    #             DOCKER_USERNAME: luisher
    #             IMAGE_NAME: github-actions-nginx
    #           run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
#environment level at job level
# jobs:
    # docker:
    #     env:
    #       CONTAINER_REGISTRY: docker.io
    #       DOCKER_USERNAME: luisher
    #       IMAGE_NAME: github-actions-nginx 
    #     runs-on: ubuntu-latest
    #     steps:
    #       - name: Docker build
    #         run: echo docker build -t ${{ env.CONTAINER_REGISTRY }}/$DOCKER_USERNAME/$IMAGE_NAME:latest

    #       - name: Docker Login
    #         run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

    #       - name: Docker Publish            
    #         run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
    # deploy:
    #     env:
    #       CONTAINER_REGISTRY: docker.io
    #       DOCKER_USERNAME: luisher
    #       IMAGE_NAME: github-actions-nginx 
    #     needs: docker
    #     runs-on: ubuntu-latest
    #     steps:
    #       - name: Docker run
    #         run: docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

# environment variables at workflow levels
env:
        CONTAINER_REGISTRY: docker.io        
        IMAGE_NAME: github-actions-nginx
jobs:    
    docker:         
        runs-on: ubuntu-latest
        steps:
        - name: Docker build
          run: echo docker build -t ${{ env.CONTAINER_REGISTRY }}/$DOCKER_USERNAME/$IMAGE_NAME:latest

        - name: Docker Login
        # el secreto esta seteado a nivel de repositorio en la configuracopn
          run: echo docker login --username=${{ vars.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}

        - name: Docker Publish            
          run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
    deploy:
        env:
            CONTAINER_REGISTRY: docker.io
            DOCKER_USERNAME: luisher
            IMAGE_NAME: github-actions-nginx 
        needs: docker
        # se usa para evitar que se ejecuten dos workflows de forma concurrente
        concurrency: 
            group: production-deployment
            # si esto esta en true cualquier despliegue en curso se cancelará y se ejecutará el nuevo
            cancel-in-progress: false
        runs-on: ubuntu-latest
        steps:
        - name: Docker run
          run: |
            echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest
            sleep 600

